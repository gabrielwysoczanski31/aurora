import React, { useState, useEffect } from 'react';
import { X, Save, Building, MapPin, Mail, User, FileText, Thermometer, Calendar } from 'lucide-react';
import Button from '../../components/ui/Button';

const BuildingForm = ({ building, onSubmit, onCancel, darkMode, clients = [] }) => {
  // Initialize form data with provided building or default values
  const [formData, setFormData] = useState(building || {
    address: '',
    city: '',
    postalCode: '',
    clientId: '',
    heatingType: '',
    lastInspection: new Date().toISOString().split('T')[0],
    yearBuilt: '',
    floors: '',
    apartments: ''
  });
  
  // Form validation state
  const [errors, setErrors] = useState({});
  const [isSubmitting, setIsSubmitting] = useState(false);
  
  // List of available heating types
  const heatingTypes = ['Gazowe', 'Elektryczne', 'Węglowe', 'Olejowe', 'Kominkowe'];
  
  // List of common cities
  const cities = ['Warszawa', 'Kraków', 'Poznań', 'Wrocław', 'Gdańsk', 'Katowice', 'Łódź', 'Lublin'];
  
  // Handle form field changes
  const handleChange = (e) => {
    const { name, value, type } = e.target;
    
    // Convert numerical inputs to numbers
    if (type === 'number') {
      setFormData(prev => ({
        ...prev,
        [name]: value ? parseInt(value) : ''
      }));
    } else {
      setFormData(prev => ({
        ...prev,
        [name]: value
      }));
    }
    
    // Clear validation error when field is edited
    if (errors[name]) {
      setErrors(prev => {
        const newErrors = { ...prev };
        delete newErrors[name];
        return newErrors;
      });
    }
  };
  
  // Validate form fields
  const validate = () => {
    const newErrors = {};
    
    // Required fields validation
    if (!formData.address) newErrors.address = 'Adres jest wymagany';
    if (!formData.city) newErrors.city = 'Miasto jest wymagane';
    if (!formData.postalCode) newErrors.postalCode = 'Kod pocztowy jest wymagany';
    if (!formData.clientId) newErrors.clientId = 'Klient jest wymagany';
    if (!formData.heatingType) newErrors.heatingType = 'Rodzaj ogrzewania jest wymagany';
    
    // Postal code format validation (XX-XXX)
    if (formData.postalCode && !/^\d{2}-\d{3}$/.test(formData.postalCode)) {
      newErrors.postalCode = 'Nieprawidłowy format kodu pocztowego (XX-XXX)';
    }
    
    // Numeric fields validation
    if (formData.yearBuilt && (formData.yearBuilt < 1800 || formData.yearBuilt > new Date().getFullYear())) {
      newErrors.yearBuilt = 'Nieprawidłowy rok budowy';
    }
    
    if (formData.floors && (formData.floors < 1 || formData.floors > a100)) {
      newErrors.floors = 'Nieprawidłowa liczba pięter';
    }
    
    if (formData.apartments && (formData.apartments < 1 || formData.apartments > 1000)) {
      newErrors.apartments = 'Nieprawidłowa liczba mieszkań';
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };
  
  // Handle form submission
  const handleSubmit = (e) => {
    e.preventDefault();
    
    if (validate()) {
      setIsSubmitting(true);
      
      // For new buildings, generate an ID
      const buildingData = building ? { ...formData } : { 
        ...formData,
        id: Date.now(), // In a real app, this would be generated by the backend
      };
      
      // Find the client name based on the selected client ID
      const selectedClient = clients.find(client => client.id.toString() === formData.clientId.toString());
      if (selectedClient) {
        buildingData.clientName = selectedClient.name;
      }
      
      // Convert date from YYYY-MM-DD to DD.MM.YYYY format
      if (buildingData.lastInspection) {
        const dateParts = buildingData.lastInspection.split('-');
        if (dateParts.length === 3) {
          buildingData.lastInspection = `${dateParts[2]}.${dateParts[1]}.${dateParts[0]}`;
        }
      }
      
      // Submit form data
      setTimeout(() => {
        onSubmit(buildingData);
        setIsSubmitting(false);
      }, 500); // Simulate API delay
    }
  };
  
  // Define form field styling
  const inputClass = (fieldName) => `
    w-full px-3 py-2 border rounded-lg 
    ${darkMode ? 'bg-gray-700 border-gray-600 text-white' : 'bg-white border-gray-300'} 
    ${errors[fieldName] ? 'border-red-500' : ''}
  `;

  return (
    <div className={`p-6 rounded-lg shadow-xl ${darkMode ? 'bg-gray-800' : 'bg-white'}`}>
      <div className="flex justify-between items-center mb-4">
        <h3 className="text-xl font-semibold flex items-center">
          <Building size={24} className="mr-2 text-red-500" />
          {building ? 'Edytuj budynek' : 'Dodaj nowy budynek'}
        </h3>
        <button 
          onClick={onCancel} 
          className="text-gray-500 hover:text-gray-700"
        >
          <X size={24} />
        </button>
      </div>
      
      <form onSubmit={handleSubmit}>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
          {/* Address field */}
          <div className="md:col-span-2">
            <label className="block text-gray-500 mb-1">Adres*</label>
            <div className="relative">
              <input
                type="text"
                name="address"
                value={formData.address}
                onChange={handleChange}
                className={inputClass('address')}
                placeholder="ul. Przykładowa 123"
              />
              <MapPin size={16} className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500" />
            </div>
            {errors.address && <p className="text-red-500 text-sm mt-1">{errors.address}</p>}
          </div>
          
          {/* City field */}
          <div>
            <label className="block text-gray-500 mb-1">Miasto*</label>
            <div className="relative">
              <select
                name="city"
                value={formData.city}
                onChange={handleChange}
                className={inputClass('city')}
              >
                <option value="">Wybierz miasto</option>
                {cities.map(city => (
                  <option key={city} value={city}>{city}</option>
                ))}
                <option value="other">Inne miasto</option>
              </select>
              <MapPin size={16} className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500" />
            </div>
            {errors.city && <p className="text-red-500 text-sm mt-1">{errors.city}</p>}
          </div>
          
          {/* Postal code field */}
          <div>
            <label className="block text-gray-500 mb-1">Kod pocztowy*</label>
            <div className="relative">
              <input
                type="text"
                name="postalCode"
                value={formData.postalCode}
                onChange={handleChange}
                className={inputClass('postalCode')}
                placeholder="00-000"
              />
              <Mail size={16} className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500" />
            </div>
            {errors.postalCode && <p className="text-red-500 text-sm mt-1">{errors.postalCode}</p>}
          </div>
          
          {/* Client field */}
          <div>
            <label className="block text-gray-500 mb-1">Klient*</label>
            <div className="relative">
              <select
                name="clientId"
                value={formData.clientId}
                onChange={handleChange}
                className={inputClass('clientId')}
              >
                <option value="">Wybierz klienta</option>
                {clients.length > 0 ? (
                  clients.map(client => (
                    <option key={client.id} value={client.id}>{client.name}</option>
                  ))
                ) : (
                  <>
                    <option value="1">Wspólnota Mieszkaniowa "Pod Lipami"</option>
                    <option value="2">Spółdzielnia Mieszkaniowa "Centrum"</option>
                    <option value="3">Wspólnota Mieszkaniowa "Nad Stawem"</option>
                    <option value="4">Zarząd Budynków Komunalnych</option>
                  </>
                )}
              </select>
              <User size={16} className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500" />
            </div>
            {errors.clientId && <p className="text-red-500 text-sm mt-1">{errors.clientId}</p>}
          </div>
          
          {/* Heating type field */}
          <div>
            <label className="block text-gray-500 mb-1">Rodzaj ogrzewania*</label>
            <div className="relative">
              <select
                name="heatingType"
                value={formData.heatingType}
                onChange={handleChange}
                className={inputClass('heatingType')}
              >
                <option value="">Wybierz rodzaj ogrzewania</option>
                {heatingTypes.map(type => (
                  <option key={type} value={type}>{type}</option>
                ))}
              </select>
              <Thermometer size={16} className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500" />
            </div>
            {errors.heatingType && <p className="text-red-500 text-sm mt-1">{errors.heatingType}</p>}
          </div>
          
          {/* Last inspection field */}
          <div>
            <label className="block text-gray-500 mb-1">Ostatnia kontrola</label>
            <div className="relative">
              <input
                type="date"
                name="lastInspection"
                value={formData.lastInspection}
                onChange={handleChange}
                className={inputClass('lastInspection')}
              />
              <Calendar size={16} className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500" />
            </div>
            {errors.lastInspection && <p className="text-red-500 text-sm mt-1">{errors.lastInspection}</p>}
          </div>
          
          {/* Year built field */}
          <div>
            <label className="block text-gray-500 mb-1">Rok budowy</label>
            <div className="relative">
              <input
                type="number"
                name="yearBuilt"
                value={formData.yearBuilt}
                onChange={handleChange}
                className={inputClass('yearBuilt')}
                placeholder="np. 1980"
                min="1800"
                max={new Date().getFullYear()}
              />
              <FileText size={16} className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500" />
            </div>
            {errors.yearBuilt && <p className="text-red-500 text-sm mt-1">{errors.yearBuilt}</p>}
          </div>
          
          {/* Floors field */}
          <div>
            <label className="block text-gray-500 mb-1">Liczba pięter</label>
            <div className="relative">
              <input
                type="number"
                name="floors"
                value={formData.floors}
                onChange={handleChange}
                className={inputClass('floors')}
                placeholder="np. 5"
                min="1"
              />
              <Building size={16} className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500" />
            </div>
            {errors.floors && <p className="text-red-500 text-sm mt-1">{errors.floors}</p>}
          </div>
          
          {/* Apartments field */}
          <div>
            <label className="block text-gray-500 mb-1">Liczba mieszkań</label>
            <div className="relative">
              <input
                type="number"
                name="apartments"
                value={formData.apartments}
                onChange={handleChange}
                className={inputClass('apartments')}
                placeholder="np. 20"
                min="1"
              />
              <Building size={16} className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500" />
            </div>
            {errors.apartments && <p className="text-red-500 text-sm mt-1">{errors.apartments}</p>}
          </div>
        </div>
        
        <div className="flex justify-end space-x-2 pt-4 border-t dark:border-gray-700">
          <Button 
            type="button" 
            variant="secondary"
            onClick={onCancel}
            disabled={isSubmitting}
          >
            Anuluj
          </Button>
          <Button 
            type="submit"
            color="red"
            disabled={isSubmitting}
            className="flex items-center"
          >
            {isSubmitting ? (
              <div className="flex items-center">
                <div className="animate-spin h-4 w-4 mr-2 border-2 border-white border-t-transparent rounded-full"></div>
                Zapisywanie...
              </div>
            ) : (
              <>
                <Save size={16} className="mr-2" />
                {building ? 'Zapisz zmiany' : 'Dodaj budynek'}
              </>
            )}
          </Button>
        </div>
      </form>
    </div>
  );
};

export default BuildingForm;